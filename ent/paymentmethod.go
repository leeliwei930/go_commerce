// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/leeliwei930/go_commerce/ent/paymentmethod"
)

// PaymentMethod is the model entity for the PaymentMethod schema.
type PaymentMethod struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentMethod) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PaymentMethod", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentMethod fields.
func (pm *PaymentMethod) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this PaymentMethod.
// Note that you need to call PaymentMethod.Unwrap() before calling this method if this PaymentMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PaymentMethod) Update() *PaymentMethodUpdateOne {
	return (&PaymentMethodClient{config: pm.config}).UpdateOne(pm)
}

// Unwrap unwraps the PaymentMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PaymentMethod) Unwrap() *PaymentMethod {
	tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentMethod is not a transactional entity")
	}
	pm.config.driver = tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PaymentMethod) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentMethod(")
	builder.WriteString(fmt.Sprintf("id=%v", pm.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentMethods is a parsable slice of PaymentMethod.
type PaymentMethods []*PaymentMethod

func (pm PaymentMethods) config(cfg config) {
	for _i := range pm {
		pm[_i].config = cfg
	}
}
